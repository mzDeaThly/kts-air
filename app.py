# app.py
# ... (imports) ...

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Scheduler (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) ---
def send_daily_schedules():
    with app.app_context():
        # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
        schedules = database.get_today_schedules()
        # ... (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° team_tasks ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...

        for team_id, tasks in team_tasks.items():
            try:
                tasks_details_list = []
                for task in tasks: # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á dictionary ‡∏Ç‡∏≠‡∏á task
                    task_detail_str = (
                        f"üìÑ ‡∏á‡∏≤‡∏ô: {task['task_details']}\n"
                        f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {task['start_time']} - {task['end_time']}\n"
                        f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {task.get('location', '-')}\n" # ‡πÉ‡∏ä‡πâ .get ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
                        f"üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: {task.get('contact_phone', '-')}"
                    )
                    tasks_details_list.append(task_detail_str)

                tasks_string = "\n--------------------\n".join(tasks_details_list)
                
                message_text = (
                    f"üì¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!\n"
                    f"--------------------\n"
                    f"{tasks_string}"
                )
                # ... (‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á TemplateMessage ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
            except Exception as e:
                print(f"Error sending to {team_id}: {e}")

# ... (Route '/' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dashboard ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...


# --- API Endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Calendar (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) ---

@app.route('/api/schedules', methods=['GET'])
def api_get_schedules():
    schedules = database.get_all_schedules()
    events = []
    for schedule in schedules:
        events.append({
            'title': schedule['task_details'], # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
            'start': f"{schedule['work_date']}T{schedule['start_time']}",
            'end': f"{schedule['work_date']}T{schedule['end_time']}",
            # ‡πÉ‡∏ä‡πâ extendedProps ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            'extendedProps': {
                'team_id': schedule['team_id'],
                'details': schedule['task_details'],
                'location': schedule.get('location', '-'),
                'contact_phone': schedule.get('contact_phone', '-')
            }
        })
    return jsonify(events)

@app.route('/api/schedules', methods=['POST'])
def api_add_schedule():
    data = request.get_json()
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å request
        team_id = data['team_id']
        task_details = data['task_details']
        work_date = data['work_date']
        start_time = data['start_time']
        end_time = data['end_time']
        location = data['location']
        contact_phone = data['contact_phone']

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á database function
        database.add_schedule(team_id, task_details, work_date, start_time, end_time, location, contact_phone)
        return jsonify({'status': 'success', 'message': 'Schedule added successfully'})
    # ... (‡∏™‡πà‡∏ß‡∏ô error handling ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...